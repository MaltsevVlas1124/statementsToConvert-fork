name: Convert LaTeX to Markdown

on:
  workflow_dispatch: # Дозволяє запускати вручну з вкладки Actions

jobs:
  convert:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository with PAT
        uses: actions/checkout@v4
        with:
          # Використовуйте PAT з правами на запис до репозиторію
          token: ${{ secrets.GH_TOKEN }}
          fetch-depth: 0 # Потрібно для створення та пушу нової гілки

      - name: Install Pandoc and Python
        run: |
          sudo apt-get update
          sudo apt-get install -y pandoc python3 python3-pip
          # pip install GitPython # GitPython не використовується у поточному скрипті, можна закоментувати або видалити

      - name: Clone source repository
        run: |
          # Клонуємо репозиторій з .tex файлами в окрему директорію
          echo "Cloning source repository..."
          git clone --depth=1 --branch original-filtered https://github.com/MaltsevVlas1124/statementsToConvert-fork source-repo
          echo "Source repository cloned into 'source-repo'."

      # --- ДОДАНО КРОК ДЛЯ ВИДАЛЕННЯ .git З КЛОНОВАНОГО РЕПО ---
      - name: Remove .git directory from cloned source repo
        run: |
          if [ -d "source-repo/.git" ]; then
            echo "Removing .git directory from source-repo to prevent submodule issues during cleanup..."
            rm -rf source-repo/.git
            echo ".git directory removed from source-repo."
          else
            echo "source-repo/.git directory not found. Skipping removal."
          fi
      # --- КІНЕЦЬ ДОДАНОГО КРОКУ ---

      - name: Prepare conversion script
        run: |
          # Створюємо Python скрипт для конвертації
          echo "Preparing conversion script (convert.py)..."
          cat << 'EOF' > convert.py
          import os
          import subprocess
          import shutil
          import time

          source_dir = 'source-repo'
          target_dir = 'converted-files' # Тимчасова директорія для результатів
          os.makedirs(target_dir, exist_ok=True)

          print(f"Starting conversion from '{source_dir}' to '{target_dir}'")
          start_time = time.time()

          conversion_success_count = 0
          conversion_fail_count = 0
          copy_count = 0

          # Використовуємо os.scandir для потенційно кращої продуктивності
          for entry in os.scandir(source_dir):
              if entry.is_dir() and entry.name == '.git':
                  print("Skipping .git directory in source_dir root.")
                  continue # Пропускаємо .git на верхньому рівні, якщо він ще існує

          for root, dirs, files in os.walk(source_dir):
              # Явно пропускаємо будь-які директорії .git під час обходу
              if '.git' in dirs:
                  print(f"Skipping .git directory found in: {root}")
                  dirs.remove('.git')

              rel_root = os.path.relpath(root, source_dir)
              target_root = os.path.join(target_dir, rel_root)
              # Створюємо відповідну структуру директорій у цільовій папці
              os.makedirs(target_root, exist_ok=True)

              for file in files:
                  source_path = os.path.join(root, file)
                  target_path = os.path.join(target_root, file)

                  if file.endswith('.tex'):
                      base_name = os.path.splitext(file)[0]
                      md_target = os.path.join(target_root, base_name + '.md')
                      print(f"Attempting to convert: {source_path} -> {md_target}")
                      try:
                          # Запускаємо pandoc для конвертації .tex в .md
                          result = subprocess.run(
                              ['pandoc', source_path, '-o', md_target, '--from=latex', '--to=markdown'],
                              check=True, # Викине помилку, якщо pandoc поверне ненульовий код виходу
                              capture_output=True, # Захоплюємо stdout та stderr
                              text=True, # Декодуємо stdout/stderr як текст
                              encoding='utf-8', # Явно вказуємо кодування
                              timeout=120 # Збільшено таймаут для складних файлів
                          )
                          print(f"[SUCCESS] Converted {source_path} -> {md_target}")
                          if result.stderr:
                              # Виводимо попередження Pandoc, якщо вони є
                              print(f"  Pandoc warnings/info:\n---\n{result.stderr.strip()}\n---")
                          conversion_success_count += 1
                      except subprocess.CalledProcessError as e:
                          # Якщо pandoc не зміг конвертувати, копіюємо оригінальний .tex файл
                          shutil.copy2(source_path, target_path)
                          print(f"[FAILED] Pandoc failed for {source_path}. Copied original to {target_path}.")
                          print(f"  Return code: {e.returncode}")
                          if e.stderr:
                              print(f"  Pandoc stderr:\n---\n{e.stderr.strip()}\n---")
                          if e.stdout: # Іноді корисна інформація може бути і в stdout при помилці
                              print(f"  Pandoc stdout:\n---\n{e.stdout.strip()}\n---")
                          conversion_fail_count += 1
                      except subprocess.TimeoutExpired as e:
                          shutil.copy2(source_path, target_path)
                          print(f"[TIMEOUT] Pandoc timed out after {e.timeout}s for {source_path}. Copied original to {target_path}.")
                          conversion_fail_count += 1
                      except Exception as e:
                          # Обробка інших можливих помилок (напр., проблеми з файлами)
                          shutil.copy2(source_path, target_path)
                          print(f"[ERROR] Unexpected error during conversion of {source_path}: {e}. Copied original.")
                          conversion_fail_count += 1
                  else:
                      # Копіюємо всі інші файли (не .tex) без змін
                      try:
                          shutil.copy2(source_path, target_path)
                          print(f"[COPIED] Copied non-TeX file: {source_path} -> {target_path}")
                          copy_count += 1
                      except Exception as e:
                          print(f"[ERROR] Failed to copy file {source_path} to {target_path}: {e}")


          end_time = time.time()
          duration = end_time - start_time
          print(f"\nConversion finished in {duration:.2f} seconds.")
          print("Conversion Summary:")
          print(f"  Successfully converted (.tex -> .md): {conversion_success_count}")
          print(f"  Failed conversions (original .tex copied): {conversion_fail_count}")
          print(f"  Other files copied: {copy_count}")

          # Переміщуємо результат на один рівень вище для наступного кроку
          # Це робиться, щоб уникнути конфліктів з git у поточному репозиторії
          target_parent_dir = '../converted-files'
          if os.path.exists(target_parent_dir):
              print(f"Removing existing directory: {target_parent_dir}")
              shutil.rmtree(target_parent_dir) # Видаляємо стару директорію, якщо вона існує
          print(f"Moving results from '{target_dir}' to '{target_parent_dir}'")
          shutil.move(target_dir, target_parent_dir)
          print(f"Results moved successfully.")
          EOF
          echo "Conversion script created."

      - name: Run conversion script
        run: |
          echo "Executing conversion script..."
          python3 convert.py
          echo "Conversion script finished."

      - name: Create and push new branch
        env:
          # Переконайтесь, що секрет GH_TOKEN існує та має потрібні права
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
        run: |
          # --- ЗМІНЕНО ФОРМАТ НАЗВИ ГІЛКИ ТУТ ---
          BRANCH_NAME="brute-convert-$(date +%Y.%m.%d)"
          echo "Preparing to create and push branch: $BRANCH_NAME"

          # Налаштовуємо Git користувача для коміту
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

          # Перевіряємо, чи існує вже така гілка локально (малоймовірно, але про всяк випадок)
          if git rev-parse --verify $BRANCH_NAME > /dev/null 2>&1; then
            echo "Branch $BRANCH_NAME already exists locally. Checking it out."
            git checkout $BRANCH_NAME
          else
            # Створюємо нову гілку
            echo "Creating new branch: $BRANCH_NAME"
            git checkout -b $BRANCH_NAME
          fi

          # Очищуємо поточну робочу директорію від старих файлів (безпечний спосіб)
          echo "Cleaning working directory..."
          git rm -rf . > /dev/null # Видаляємо всі файли, що відстежуються git
          # Видаляємо всі невідстежувані файли та директорії, крім .git та потенційно інших потрібних
          git clean -fdx

          # Переміщуємо конвертовані файли в корінь репозиторію
          CONVERTED_DIR="../converted-files"
          echo "Moving converted files from $CONVERTED_DIR into repository root..."
          if [ -d "$CONVERTED_DIR" ]; then
            # Перевіряємо, чи є що переміщувати
            if [ -n "$(ls -A $CONVERTED_DIR)" ]; then
              # Використовуємо rsync для кращої обробки файлів/директорій
              rsync -av --remove-source-files "$CONVERTED_DIR/" .
              echo "Files moved from $CONVERTED_DIR."
              # Спроба видалити тепер порожню батьківську директорію
              rmdir "$CONVERTED_DIR" 2>/dev/null || echo "Directory $CONVERTED_DIR not empty after rsync or could not be removed."
            else
              echo "Directory $CONVERTED_DIR is empty. Nothing to move."
            fi
          else
            echo "Warning: Source directory $CONVERTED_DIR not found! No files moved."
            # Можна додати 'exit 1' тут, якщо відсутність файлів є критичною помилкою
          fi

          # Додаємо всі нові/змінені файли до індексу Git
          echo "Adding files to git index..."
          git add .

          # Перевіряємо, чи є зміни для коміту
          if git diff --staged --quiet; then
            echo "No changes detected after conversion. Nothing to commit or push."
            # Якщо гілка була щойно створена і порожня, її можна видалити
            # git checkout main # або ваша гілка за замовчуванням
            # git branch -D $BRANCH_NAME
          else
            # Створюємо коміт
            echo "Creating commit..."
            COMMIT_MESSAGE="Automated conversion: .tex to .md on $BRANCH_NAME"
            # Додаємо [skip ci] до повідомлення коміту, щоб уникнути рекурсивного запуску workflows, якщо налаштовано
            git commit -m "$COMMIT_MESSAGE [skip ci]"

            # Пушимо нову гілку до віддаленого репозиторію
            # Використовуємо токен для автентифікації
            # --force використовується для перезапису гілки, якщо вона вже існує (обережно!)
            echo "Pushing branch $BRANCH_NAME to remote repository..."
            git push https://x-access-token:${GH_TOKEN}@github.com/${{ github.repository }} $BRANCH_NAME --force
            echo "Branch $BRANCH_NAME pushed successfully."
          fi
